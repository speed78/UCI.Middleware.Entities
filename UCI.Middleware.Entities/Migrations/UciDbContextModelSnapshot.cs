// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UCI.Middleware.Entities.Context;

#nullable disable

namespace UCI.Middleware.Entities.Migrations
{
    [DbContext(typeof(UciDbContext))]
    partial class UciDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ClaimDetailErrorResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("XPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("ErrorCode")
                        .HasDatabaseName("IX_ClaimErrors_ErrorCode");

                    b.ToTable("ClaimDetailErrorsResponse");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ClaimErrorResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClaimCode")
                        .HasDatabaseName("IX_Claims_ClaimCode");

                    b.HasIndex("SubmissionId");

                    b.ToTable("ClaimsErrorResponse");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ClaimsSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CorrespondentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InputFileFullPath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("InputFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastResponseAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutputFileFullPath")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OutputFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Protocol")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubmissionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValidationError")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondentId")
                        .HasDatabaseName("IX_IvassClaimsSubmissions_CorrespondentId");

                    b.HasIndex("Protocol")
                        .HasDatabaseName("IX_IvassClaimsSubmissions_Protocol");

                    b.HasIndex("ResponseDate")
                        .HasDatabaseName("IX_IvassClaimsSubmissions_ResponseDate");

                    b.HasIndex("SendDate")
                        .HasDatabaseName("IX_IvassClaimsSubmissions_SendDate");

                    b.HasIndex("SubmissionStatusId")
                        .HasDatabaseName("IX_IvassClaimsSubmissions_SubmissionStatusId");

                    b.HasIndex("UploadDate")
                        .HasDatabaseName("IX_IvassClaimsSubmissions_UploadDate");

                    b.ToTable("ClaimsSubmissions");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.Correspondent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BdsIdentifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BdsIdentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Code");

                    b.Property<string>("ConventionalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ConventionalName");

                    b.Property<string>("NotificationEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("NotificationEmail");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("bit")
                        .HasColumnName("ReceiveNotifications");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.Property<string>("UciCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("UciCode");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("UX_Correspondents_Code");

                    b.HasIndex("UciCode")
                        .IsUnique()
                        .HasDatabaseName("UX_Correspondents_UciCode");

                    b.ToTable("Correspondents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            BdsIdentifier = "001",
                            Code = "001-000075",
                            ConventionalName = "AIG EUROPE",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000075"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            BdsIdentifier = "002",
                            Code = "002-000053",
                            ConventionalName = "ALLIANZ",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000053"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            BdsIdentifier = "002",
                            Code = "002-000039",
                            ConventionalName = "ALLIANZ",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000039"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            BdsIdentifier = "005",
                            Code = "005-000223",
                            ConventionalName = "AFES ITALIA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000223"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440004"),
                            BdsIdentifier = "005",
                            Code = "005-000326",
                            ConventionalName = "AFES ITALIA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000326"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440005"),
                            BdsIdentifier = "006",
                            Code = "006-000024",
                            ConventionalName = "AXA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000024"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440006"),
                            BdsIdentifier = "007",
                            Code = "007-000245",
                            ConventionalName = "CED",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000245"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440007"),
                            BdsIdentifier = "009",
                            Code = "009-000255",
                            ConventionalName = "CLAIMS SERV",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000255"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440008"),
                            BdsIdentifier = "010",
                            Code = "010-000246",
                            ConventionalName = "CORIS",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000246"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440009"),
                            BdsIdentifier = "011",
                            Code = "011-000278",
                            ConventionalName = "CRAWCO",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000278"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440010"),
                            BdsIdentifier = "012",
                            Code = "012-000160",
                            ConventionalName = "DARAG",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000160"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440011"),
                            BdsIdentifier = "013",
                            Code = "013-000279",
                            ConventionalName = "DEKRA ITALIA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000279"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440012"),
                            BdsIdentifier = "014",
                            Code = "014-000244",
                            ConventionalName = "GENERALI",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000244"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440013"),
                            BdsIdentifier = "016",
                            Code = "016-000078",
                            ConventionalName = "HDI",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000078"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440014"),
                            BdsIdentifier = "017",
                            Code = "017-000073",
                            ConventionalName = "HELVETIA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000073"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440015"),
                            BdsIdentifier = "019",
                            Code = "019-000237",
                            ConventionalName = "IPAS",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000237"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440016"),
                            BdsIdentifier = "020",
                            Code = "020-000266",
                            ConventionalName = "INTEREUROPE",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000266"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440017"),
                            BdsIdentifier = "021",
                            Code = "021-000230",
                            ConventionalName = "INTERFIDES",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000230"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440018"),
                            BdsIdentifier = "022",
                            Code = "022-000032",
                            ConventionalName = "ITALIANA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000032"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440019"),
                            BdsIdentifier = "022",
                            Code = "022-000109",
                            ConventionalName = "ITALIANA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000109"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440020"),
                            BdsIdentifier = "022",
                            Code = "022-000062",
                            ConventionalName = "ITALIANA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000062"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440021"),
                            BdsIdentifier = "023",
                            Code = "023-000281",
                            ConventionalName = "MSA UNIQA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000281"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440022"),
                            BdsIdentifier = "023",
                            Code = "023-000210",
                            ConventionalName = "MSA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000210"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440023"),
                            BdsIdentifier = "023",
                            Code = "023-000277",
                            ConventionalName = "MSA AIG",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000277"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440024"),
                            BdsIdentifier = "024",
                            Code = "024-000274",
                            ConventionalName = "T & S ITALIA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000274"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440025"),
                            BdsIdentifier = "025",
                            Code = "025-000262",
                            ConventionalName = "UNIPOLSAI",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000262"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440026"),
                            BdsIdentifier = "027",
                            Code = "027-000217",
                            ConventionalName = "VA IT",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000217"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440027"),
                            BdsIdentifier = "028",
                            Code = "028-000108",
                            ConventionalName = "ZURICH",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000108"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440028"),
                            BdsIdentifier = "029",
                            Code = "029-000071",
                            ConventionalName = "VERTI",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000071"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440029"),
                            BdsIdentifier = "030",
                            Code = "030-000294",
                            ConventionalName = "DIODEA",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000294"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440030"),
                            BdsIdentifier = "032",
                            Code = "032-000296",
                            ConventionalName = "AVUS WCS",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000296"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440031"),
                            BdsIdentifier = "033",
                            Code = "033-000586",
                            ConventionalName = "ADRIATIC",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000586"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440032"),
                            BdsIdentifier = "UCI",
                            Code = "UCI-000000",
                            ConventionalName = "UCI",
                            ReceiveNotifications = false,
                            Type = true,
                            UciCode = "000000"
                        });
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ErrorType", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Code");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("UX_ErrorCodes_Code");

                    b.ToTable("ErrorsType");

                    b.HasData(
                        new
                        {
                            Code = "ERRBFLU001",
                            Summary = "Il flusso, se l'estensione è diversa da \"zip\", deve essere un file XML valido con estensione \"xml\"."
                        },
                        new
                        {
                            Code = "ERRBFLU002",
                            Summary = "Il flusso XML deve essere correttamente validato con lo schema XSD."
                        },
                        new
                        {
                            Code = "ERRBFLU003",
                            Summary = "Il flusso deve superare il controllo antivirus."
                        },
                        new
                        {
                            Code = "ERRBFLU004",
                            Summary = "Il flusso deve essere decifrabile."
                        },
                        new
                        {
                            Code = "ERRBFLU005",
                            Summary = "Il flusso deve superare la verifica della firma."
                        },
                        new
                        {
                            Code = "ERRBFLU006",
                            Summary = "In caso di flusso ZIP, deve essere presente al suo interno un file avente lo stesso nome del flusso, sostituendo l'estensione \".zip\" con \".xml\". [...]"
                        },
                        new
                        {
                            Code = "ERRBFLU007",
                            Summary = "L'impresa deve essere abilitata all'invio dei flussi verso la Banca Dati."
                        },
                        new
                        {
                            Code = "ERRBFLU008",
                            Summary = "Limite giornaliero di richieste di simulazione sinistri superato."
                        },
                        new
                        {
                            Code = "ERRBFLU010",
                            Summary = "Se l'estensione del file è \".zip\", il flusso deve essere un file ZIP valido."
                        },
                        new
                        {
                            Code = "ERRBFLU011",
                            Summary = "La dimensione del flusso XML (dopo la decompressione se archivio ZIP) non deve superare 25 MiB (26214400 byte). Per i [...]"
                        },
                        new
                        {
                            Code = "ERRBISF001",
                            Summary = "Errore interno di sistema."
                        },
                        new
                        {
                            Code = "ERRNFLU009",
                            Summary = "Tutti gli allegati presenti nell'archivizio zip devono essere dichiarati nelle richieste di sospensione, pena lo scarto dell'allegato stesso."
                        },
                        new
                        {
                            Code = "ERRNSINI001",
                            Summary = "L'ambito del sinistro deve essere coerente con il tipo sinistro, in particolare: [...]"
                        },
                        new
                        {
                            Code = "ERRNSINI002",
                            Summary = "Il codice comune o il codice provincia indicati nel luogo accadimento deve essere un codice ISTAT di comune o provincia esistente alla data di accadimento del sinistro. [...]"
                        },
                        new
                        {
                            Code = "ERRNSINI003",
                            Summary = "Il codice paese estero indicato nel luogo accadimento deve essere un codice ISO 3166-1 alpha-2 di paese esistente alla data di accadimento del sinistro, ad esclusione dell'Italia. [...]"
                        },
                        new
                        {
                            Code = "ERRNSINI004",
                            Summary = "La data di accadimento del sinistro deve essere minore o uguale alla data di accettazione del flusso."
                        },
                        new
                        {
                            Code = "ERRNSINI005",
                            Summary = "La data di denuncia deve essere maggiore o uguale alla data di accadimento e minore o uguale alla data di accettazione del flusso."
                        },
                        new
                        {
                            Code = "ERRNSINI006",
                            Summary = "La data definizione deve essere coerente con lo stato del sinistro: [...]"
                        },
                        new
                        {
                            Code = "ERRNSINI007",
                            Summary = "Se la segnalazione è di tipo inserimento, il sinistro non deve essere già presente nella base dati, tra i sinistri della compagnia, con il codice sinistro indicato."
                        },
                        new
                        {
                            Code = "ERRNSINI008",
                            Summary = "Se la segnalazione è di tipo aggiornamento, il sinistro deve essere già presente nella base dati, tra i sinistri della compagnia, con il codice sinistro indicato."
                        },
                        new
                        {
                            Code = "ERRNSINI009",
                            Summary = "La data accadimento non deve essere anteriore a 40 anni prima della data di accettazione del flusso."
                        },
                        new
                        {
                            Code = "ERRNSINI010",
                            Summary = "Un soggetto testimone super partes non può essere usato anche come testimone di parte e viceversa."
                        },
                        new
                        {
                            Code = "ERRNSINI011",
                            Summary = "La data denuncia non deve essere anteriore a 40 anni prima della data di accettazione del flusso."
                        },
                        new
                        {
                            Code = "ERRNSINI012",
                            Summary = "La data definizione, se presente, non deve essere anteriore a 40 anni prima della data di accettazione del flusso."
                        },
                        new
                        {
                            Code = "ERRNSINI013",
                            Summary = "La data definizione, se presente, deve essere minore o uguale alla data di accettazione del flusso."
                        },
                        new
                        {
                            Code = "ERRNSINI015",
                            Summary = "Se la categoria antifrode è \"3\", il sinistro deve avere uno dei seguenti stati: [...]"
                        },
                        new
                        {
                            Code = "ERRNSINI016",
                            Summary = "Se la categoria antifrode è \"4\", deve essere presente almeno un contenzioso."
                        },
                        new
                        {
                            Code = "ERRNSINI017",
                            Summary = "Il tipo di altra figura collegato direttamente al sinistro può essere solo *testimone* (tipo 9) [...]"
                        },
                        new
                        {
                            Code = "ERRNSINI018",
                            Summary = "Se il tipo del sinistro è diverso da: [...]"
                        },
                        new
                        {
                            Code = "ERRNSINI019",
                            Summary = "Il codice della compagnia assicurativa che ha richiesto l'incentivo antifrode deve essere un codice di compagnia IVASS valido."
                        },
                        new
                        {
                            Code = "ERRNSINI020",
                            Summary = "Il codice della compagnia assicurativa che ha pagato l'incentivo antifrode deve essere un codice di compagnia IVASS valido."
                        },
                        new
                        {
                            Code = "ERRNSINI021",
                            Summary = "La data di chiusura dell'incentivo antifrode deve essere maggiore della data di denuncia del sinistro."
                        },
                        new
                        {
                            Code = "ERRNSINI022",
                            Summary = "La data di chiusura dell'incentivo antifrode deve essere minore o uguale alla data di accettazione del flusso."
                        },
                        new
                        {
                            Code = "ERRNSINI023",
                            Summary = "Il codice della compagnia assicurativa che dichiara il nega evento deve essere un codice di compagnia IVASS valido."
                        },
                        new
                        {
                            Code = "ERRNSINI024",
                            Summary = "La data di definizione del nega evento deve essere maggiore o uguale alla data di accadimento del sinistro."
                        });
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.FlowErrorResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ErrorCode")
                        .HasDatabaseName("IX_FlowErrors_ErrorCode");

                    b.HasIndex("SubmissionId");

                    b.ToTable("FlowErrorsResponse");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.SubmissionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("UX_SubmissionStatus_Description");

                    b.ToTable("SubmissionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Uploaded"
                        },
                        new
                        {
                            Id = 2,
                            Description = "SizeValidated"
                        },
                        new
                        {
                            Id = 3,
                            Description = "SchemaValidated"
                        },
                        new
                        {
                            Id = 4,
                            Description = "UciValidated"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sent"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Completed"
                        });
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ClaimDetailErrorResponse", b =>
                {
                    b.HasOne("UCI.Middleware.Entities.Entities.Ivass.ClaimErrorResponse", "Claim")
                        .WithMany("ClaimErrors")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UCI.Middleware.Entities.Entities.Ivass.ErrorType", "Error")
                        .WithMany("ClaimErrors")
                        .HasForeignKey("ErrorCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ClaimErrorResponse", b =>
                {
                    b.HasOne("UCI.Middleware.Entities.Entities.Ivass.ClaimsSubmission", "Submission")
                        .WithMany("Claims")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ClaimsSubmission", b =>
                {
                    b.HasOne("UCI.Middleware.Entities.Entities.Ivass.Correspondent", "Correspondent")
                        .WithMany()
                        .HasForeignKey("CorrespondentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UCI.Middleware.Entities.Entities.Ivass.SubmissionStatus", "SubmissionStatus")
                        .WithMany("ClaimsSubmissions")
                        .HasForeignKey("SubmissionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Correspondent");

                    b.Navigation("SubmissionStatus");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.FlowErrorResponse", b =>
                {
                    b.HasOne("UCI.Middleware.Entities.Entities.Ivass.ErrorType", "Error")
                        .WithMany("FlowErrors")
                        .HasForeignKey("ErrorCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UCI.Middleware.Entities.Entities.Ivass.ClaimsSubmission", "Submission")
                        .WithMany("FlowErrors")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ClaimErrorResponse", b =>
                {
                    b.Navigation("ClaimErrors");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ClaimsSubmission", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("FlowErrors");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.ErrorType", b =>
                {
                    b.Navigation("ClaimErrors");

                    b.Navigation("FlowErrors");
                });

            modelBuilder.Entity("UCI.Middleware.Entities.Entities.Ivass.SubmissionStatus", b =>
                {
                    b.Navigation("ClaimsSubmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
